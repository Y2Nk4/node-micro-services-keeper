//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var ClientInfo = module.exports.ClientInfo = function(args) {
  this.DuplexConnection = null;
  this.IPAddress = null;
  this.ServicePort = null;
  this.ServiceName = null;
  this.ClientUUID = null;
  this.StartedAt = null;
  this.PodHardwareInfo = null;
  if (args) {
    if (args.DuplexConnection !== undefined && args.DuplexConnection !== null) {
      this.DuplexConnection = args.DuplexConnection;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field DuplexConnection is unset!');
    }
    if (args.IPAddress !== undefined && args.IPAddress !== null) {
      this.IPAddress = args.IPAddress;
    }
    if (args.ServicePort !== undefined && args.ServicePort !== null) {
      this.ServicePort = args.ServicePort;
    }
    if (args.ServiceName !== undefined && args.ServiceName !== null) {
      this.ServiceName = args.ServiceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ServiceName is unset!');
    }
    if (args.ClientUUID !== undefined && args.ClientUUID !== null) {
      this.ClientUUID = args.ClientUUID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ClientUUID is unset!');
    }
    if (args.StartedAt !== undefined && args.StartedAt !== null) {
      this.StartedAt = args.StartedAt;
    }
    if (args.PodHardwareInfo !== undefined && args.PodHardwareInfo !== null) {
      this.PodHardwareInfo = new ttypes.PodHardwareInfo(args.PodHardwareInfo);
    }
  }
};
ClientInfo.prototype = {};
ClientInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.DuplexConnection = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.IPAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.ServicePort = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ServiceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ClientUUID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.StartedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.PodHardwareInfo = new ttypes.PodHardwareInfo();
        this.PodHardwareInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInfo.prototype.write = function(output) {
  output.writeStructBegin('ClientInfo');
  if (this.DuplexConnection !== null && this.DuplexConnection !== undefined) {
    output.writeFieldBegin('DuplexConnection', Thrift.Type.BOOL, 1);
    output.writeBool(this.DuplexConnection);
    output.writeFieldEnd();
  }
  if (this.IPAddress !== null && this.IPAddress !== undefined) {
    output.writeFieldBegin('IPAddress', Thrift.Type.STRING, 2);
    output.writeString(this.IPAddress);
    output.writeFieldEnd();
  }
  if (this.ServicePort !== null && this.ServicePort !== undefined) {
    output.writeFieldBegin('ServicePort', Thrift.Type.I16, 3);
    output.writeI16(this.ServicePort);
    output.writeFieldEnd();
  }
  if (this.ServiceName !== null && this.ServiceName !== undefined) {
    output.writeFieldBegin('ServiceName', Thrift.Type.STRING, 4);
    output.writeString(this.ServiceName);
    output.writeFieldEnd();
  }
  if (this.ClientUUID !== null && this.ClientUUID !== undefined) {
    output.writeFieldBegin('ClientUUID', Thrift.Type.STRING, 5);
    output.writeString(this.ClientUUID);
    output.writeFieldEnd();
  }
  if (this.StartedAt !== null && this.StartedAt !== undefined) {
    output.writeFieldBegin('StartedAt', Thrift.Type.STRING, 6);
    output.writeString(this.StartedAt);
    output.writeFieldEnd();
  }
  if (this.PodHardwareInfo !== null && this.PodHardwareInfo !== undefined) {
    output.writeFieldBegin('PodHardwareInfo', Thrift.Type.STRUCT, 7);
    this.PodHardwareInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PodHardwareInfo = module.exports.PodHardwareInfo = function(args) {
  this.CPU = null;
  this.TotalMemory = null;
  this.Platform = null;
  if (args) {
    if (args.CPU !== undefined && args.CPU !== null) {
      this.CPU = args.CPU;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field CPU is unset!');
    }
    if (args.TotalMemory !== undefined && args.TotalMemory !== null) {
      this.TotalMemory = args.TotalMemory;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field TotalMemory is unset!');
    }
    if (args.Platform !== undefined && args.Platform !== null) {
      this.Platform = args.Platform;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Platform is unset!');
    }
  }
};
PodHardwareInfo.prototype = {};
PodHardwareInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.CPU = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.TotalMemory = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Platform = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PodHardwareInfo.prototype.write = function(output) {
  output.writeStructBegin('PodHardwareInfo');
  if (this.CPU !== null && this.CPU !== undefined) {
    output.writeFieldBegin('CPU', Thrift.Type.BYTE, 1);
    output.writeByte(this.CPU);
    output.writeFieldEnd();
  }
  if (this.TotalMemory !== null && this.TotalMemory !== undefined) {
    output.writeFieldBegin('TotalMemory', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.TotalMemory);
    output.writeFieldEnd();
  }
  if (this.Platform !== null && this.Platform !== undefined) {
    output.writeFieldBegin('Platform', Thrift.Type.STRING, 3);
    output.writeString(this.Platform);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

